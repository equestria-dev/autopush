"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * In progress, not yet working. Digging up bugs ;)
 */
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const assert_1 = __importDefault(require("assert"));
const crypto_1 = __importDefault(require("crypto"));
const utils_1 = require("../src/utils");
class MctlRunner {
    start(verbose = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const spawnOpts = {
                stdio: verbose ? 'inherit' : undefined
            };
            this.allowedToExit = false;
            this.proc = child_process_1.spawn('yarn', ['mctl', 'mount'], spawnOpts);
            this.proc.on('exit', () => {
                if (!this.allowedToExit) {
                    console.error('mctl mount exited unexpectedly!');
                    process.exit(1);
                }
            });
        });
    }
    kill() {
        this.allowedToExit = true;
        this.proc.kill();
    }
}
const m = new MctlRunner();
process.once('SIGINT', () => {
    console.log('sigint');
    m.kill();
});
const runMountTests = (mountPath = './mnt') => __awaiter(void 0, void 0, void 0, function* () {
    console.log(`Starting 'mctl mount' and waiting 5 seconds...`);
    m.start();
    yield utils_1.delayMillis(5000);
    const testDir = mountPath + '/_mctl_tests';
    // console.log('setup test path', testDir, ',,,')
    // execSync(`rm -rf ${testDir}`)
    // fs.mkdirSync(testDir)
    // fs.readdirSync(mountPath)
    // b1: ascii text file
    // const b1 = Buffer.from('this is a testfile')
    // const b1Hash = crypto.createHash('sha256').update(b1).digest('hex')
    // const b1fn = testDir + '/file1.txt'
    // b2: random bytes
    const b2 = fs_1.default.readFileSync('./foo.txt');
    // const b2 = Buffer.from(crypto.randomBytes(10))
    // const b2 = Buffer.from('foo')
    const b2Hash = crypto_1.default.createHash('sha256').update(b2).digest('hex');
    // const b2fn = testDir + '/file2.bin'
    // writeFileSync('./file2.bin', b2)
    // write files
    // console.log('write files...')
    // fs.writeFileSync(b1fn, b1)
    // fs.writeFileSync(b2fn, b2)
    // await delayMillis(50000)
    // console.log(`exit 'mctl mount' and wait 5 sec...`)
    // m.kill()
    // await delayMillis(5000)
    // console.log(`Starting 'mctl mount' and waiting 5 seconds...`)
    // m.start()
    // await delayMillis(5000)
    // console.log('Reading files in testdir...')
    // const files = fs.readdirSync(testDir)
    // console.log(files)
    // assert(files.length === 2)
    // console.log('Comparing filesize via fs.stat...')
    // const b1nStat = fs.statSync(b1fn)
    // const b2nStat = fs.statSync(b2fn)
    // assert(b1nStat.size === 18)
    // assert(b2nStat.size === b2.length)
    // console.log('Reading files and comparing content...')
    // // const b1n = fs.readFileSync(b1fn)
    // const b2n = fs.readFileSync(b2fn)
    const b2n = fs_1.default.readFileSync('mnt/foo.txt');
    // // const b1nHash = crypto.createHash('sha256').update(b1n).digest('hex')
    const b2nHash = crypto_1.default.createHash('sha256').update(b2n).digest('hex');
    // // assert(b1nHash === b1Hash, `Hash mismatch for ${b1fn}`)
    console.log('b2', b2, b2Hash);
    console.log('b2n', b2n, b2nHash);
    // console.log('b2Hash', b2Hash, b2)
    // console.log('b2nHash', b2nHash, b2n)
    // assert(b2nHash === b2Hash, `Hash mismatch for ${b2fn}`)
    assert_1.default(b2nHash === b2Hash);
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield runMountTests();
    }
    catch (e) {
        console.error('Test with error!');
        console.error(e);
    }
    finally {
        console.log('Shutting down...');
        m.kill();
    }
}))();
//# sourceMappingURL=test-mount.js.map