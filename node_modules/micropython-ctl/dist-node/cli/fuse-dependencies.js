"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAndInstall = void 0;
/**
 * Helper to check and install the fuse dependencies.
 *
 * Linux + macOS: https://github.com/fuse-friends/fuse-native
 * Windows: https://github.com/dokan-dev/dokany + https://github.com/direktspeed/node-fuse-bindings
 */
const path = __importStar(require("path"));
const readline = __importStar(require("readline"));
const utils_1 = require("./utils");
const child_process_1 = require("child_process");
const isWin = process.platform === 'win32';
const isLinux = process.platform === 'linux';
const askQuestion = (query) => {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise(resolve => rl.question(query, ans => {
        rl.close();
        resolve(ans);
    }));
};
// Works for both Linux and macOS
const checkFuseOnLinuxMacOS = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // tslint:disable-next-line: no-var-requires
        require('fuse-native');
        return true;
    }
    catch (e) {
        if (e.code !== 'MODULE_NOT_FOUND')
            throw e;
    }
    // Module not found...
    const cmd = utils_1.isInstalledGlobally() ? 'npm install -g fuse-native' : 'npm install fuse-native';
    console.log('To mount a device, you need to install the fuse-native npm package.\n');
    const answer = yield askQuestion(`Execute command '${cmd}' now? [Y/n] `);
    const doInstall = !answer || answer.toLowerCase() === 'y';
    if (!doInstall)
        return false;
    // Install the module. If it fails, the process exits
    child_process_1.execSync(cmd, {
        stdio: 'inherit',
        cwd: path.resolve(__dirname)
    });
    return true;
});
const checkFuseOnWindows = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // tslint:disable-next-line: no-var-requires
        require('node-fuse-bindings');
        return true;
    }
    catch (e) {
        if (e.code !== 'MODULE_NOT_FOUND')
            throw e;
    }
    // Check if dokan is installed
    const isDokanInstalled = !!process.env.DokanLibrary1;
    if (!isDokanInstalled) {
        console.log('Please download and install Dokan: https://github.com/dokan-dev/dokany/wiki/Installation (FUSE driver for Windows).');
        console.log('Then run this script again.');
        return false;
    }
    // Install node-fuse-bindings
    const cmd = utils_1.isInstalledGlobally() ? 'npm install -g node-fuse-bindings' : 'npm install node-fuse-bindings';
    console.log('To mount a device, you need to install https://github.com/direktspeed/node-fuse-bindings\n');
    const answer = yield askQuestion(`Execute command '${cmd}'? [Y/n] `);
    const doInstall = !answer || answer.toLowerCase() === 'y';
    if (!doInstall)
        return false;
    // Install the module. If it fails, the process exits
    child_process_1.execSync(cmd, {
        stdio: 'inherit',
        cwd: path.resolve(__dirname)
    });
    if (isLinux && !process.env.MCTL_MOUNT_RISK_SEGFAULT) {
        // In Linux we need to exit here, because when installed globally, the next require will cause a segfault
        console.log(`Successfully installed dependencies. Please re-run 'mctl mount' now`);
        process.exit(0);
    }
    return true;
});
const checkAndInstall = () => __awaiter(void 0, void 0, void 0, function* () {
    // Run check and installation process
    if (isWin) {
        yield checkFuseOnWindows();
        require('node-fuse-bindings');
    }
    else {
        yield checkFuseOnLinuxMacOS();
        require('fuse-native'); // TODO: here gives a segfault on Linux
    }
});
exports.checkAndInstall = checkAndInstall;
// checkAndInstall()
//# sourceMappingURL=fuse-dependencies.js.map