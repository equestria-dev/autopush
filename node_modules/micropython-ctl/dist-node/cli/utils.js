"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInstalledGlobally = exports.getNodeModulesDirectory = exports.humanFileSize = void 0;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const isWindows = process.platform === 'win32';
const humanFileSize = (bytes, si = true, dp = 1) => {
    const thresh = si ? 1000 : 1024;
    if (Math.abs(bytes) < thresh) {
        return bytes + 'b';
    }
    const units = si
        ? ['K', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
    let u = -1;
    const r = Math.pow(10, dp);
    do {
        bytes /= thresh;
        ++u;
    } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
    return bytes.toFixed(dp) + units[u];
};
exports.humanFileSize = humanFileSize;
const getNodeModulesDirectory = () => {
    if (isWindows) {
        return child_process_1.execSync('npm root --global').toString().trim();
    }
    else {
        // In Linux and macOS, users might use nvm, which is only enabled in their bash/shell profile.
        // In that case, 'npm root' run with execSync will not point to the nvm executable.
        const nodePath = path_1.default.dirname(path_1.default.dirname(process.execPath));
        return path_1.default.join(nodePath, 'lib/node_modules');
    }
};
exports.getNodeModulesDirectory = getNodeModulesDirectory;
const isInstalledGlobally = () => {
    const nodeModulesDir = exports.getNodeModulesDirectory();
    return __dirname.indexOf(nodeModulesDir) > -1;
};
exports.isInstalledGlobally = isInstalledGlobally;
if (require.main === module) {
    console.log('isInstalledGlobally', exports.isInstalledGlobally());
    console.log(exports.getNodeModulesDirectory());
}
//# sourceMappingURL=utils.js.map