"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.close = void 0;
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const main_1 = require("./main");
const settings_1 = require("./settings");
const errors_1 = require("./errors");
const app = express_1.default();
app.use(body_parser_1.default.text());
let server;
let _device = null;
app.get('/', (_req, res) => {
    res.send('Hello World');
});
app.get('/api', (_req, res) => {
    res.send({
        deviceId: _device.getState().connectionPath
    });
});
app.post('/api/run-script', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    // console.log('runscript', req.query)
    if (!req.body) {
        return res.status(400).send({ success: false, error: 'no script in request body' });
    }
    const options = {
        stayInRawRepl: req.query.stayInRawRepl
    };
    try {
        const scriptResponse = yield _device.runScript(req.body, options);
        return res.send(scriptResponse);
    }
    catch (e) {
        if (e instanceof errors_1.ScriptExecutionError) {
            return res.status(512).send(e.message);
        }
        else {
            return res.status(500).send(e.message);
        }
    }
}));
const close = () => __awaiter(void 0, void 0, void 0, function* () {
    server === null || server === void 0 ? void 0 : server.close();
});
exports.close = close;
const run = (device) => __awaiter(void 0, void 0, void 0, function* () {
    _device = device;
    server = app.listen(settings_1.WEBSERVER_PORT);
});
exports.run = run;
if (require.main === module) {
    const d = new main_1.MicroPythonDevice();
    exports.run(d);
}
//# sourceMappingURL=webserver.js.map