"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dedent = exports.delayMillis = exports.debug2 = exports.debug = void 0;
// export const IS_ELECTRON = typeof (navigator) !== 'undefined' && navigator.userAgent.indexOf('Electron/') > -1
// Show debug output when DEBUG variable is set (env or window)
const debug = (...args) => {
    if (!!process.env.DEBUG || (typeof window !== 'undefined' && window.DEBUG)) {
        console.log(...args);
    }
};
exports.debug = debug;
// deepdebug, set DEBUG=2
const debug2 = (...args) => {
    if (process.env.DEBUG === '2' || (typeof window !== 'undefined' && window.DEBUG === '2')) {
        console.log(...args);
    }
};
exports.debug2 = debug2;
const delayMillis = (delayMs) => new Promise(resolve => setTimeout(resolve, delayMs));
exports.delayMillis = delayMillis;
/**
 * Return trimmed, dedented text.
 * Just like the Python equivalent: https://docs.python.org/3/library/textwrap.html#textwrap.dedent
 */
const dedent = (text) => {
    // Remove newline from start and end
    const lines = text.replace(/^\n|\s+$/g, '').split("\n");
    // console.log(lines)
    if (lines.length === 0)
        return text.trim();
    // find smallest common indentation
    let mindent = null;
    lines.forEach(l => {
        const m = l.match(/^(\s+)\S+/);
        // console.log(m)
        if (m) {
            const indent = m[1].length;
            mindent = mindent ? Math.min(mindent, indent) : indent;
        }
        else {
            mindent = 0;
        }
    });
    // console.log(mindent)
    if (!mindent)
        return text.trim();
    const result = lines.map(l => l.slice(mindent)).join("\n");
    return result.trim();
};
exports.dedent = dedent;
//# sourceMappingURL=utils.js.map