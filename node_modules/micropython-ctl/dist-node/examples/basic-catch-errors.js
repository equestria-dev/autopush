"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const main_1 = require("../src/main");
// import { MicroPythonDevice, InvalidPassword, CouldNotConnect } from 'micropython-ctl'
const HOST = '10.12.50.101';
// const HOST = 'localhost';
const PASSWORD = 'test';
(() => __awaiter(void 0, void 0, void 0, function* () {
    const micropython = new main_1.MicroPythonDevice();
    try {
        // First we connect
        yield micropython.connectNetwork(HOST, PASSWORD);
        console.log('after connect');
        // Run a REPL command and capture the output
        const output = yield micropython.runScript('import os; print(os.listdir())');
        console.log('after run command', output);
        // List all files (as a list of filenames)
        const files = yield micropython.listFiles();
        console.log('files:', files);
        // Close
        yield micropython.disconnect();
        console.log('after close');
    }
    catch (e) {
        // probably invalid password, but could also invalid host or another websocket error
        if (e instanceof main_1.InvalidPassword) {
            console.error('Invalid password');
        }
        else if (e instanceof main_1.CouldNotConnect) {
            // A websocket connection problem: already a webrepl connection, ECONNREFUSED, etc
            console.error('Could not connect:', e.message);
        }
        else {
            console.error(e);
        }
    }
}))();
//# sourceMappingURL=basic-catch-errors.js.map