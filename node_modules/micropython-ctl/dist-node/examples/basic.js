"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const main_1 = require("../src/main");
// import { MicroPythonDevice } from 'micropython-ctl';
const HOST = process.env.WEBREPL_HOST || '10.12.50.101';
const PASSWORD = process.env.WEBREPL_PASSWORD || 'test';
(() => __awaiter(void 0, void 0, void 0, function* () {
    const micropython = new main_1.MicroPythonDevice();
    // Connect to micropython device
    yield micropython.connectNetwork(HOST, PASSWORD);
    // await micropython.connectSerial('/dev/ttyUSB0')
    // Run a Python script and capture the output
    console.log('Running a Python script...');
    const output = yield micropython.runScript('import os; print(os.listdir())');
    console.log('runScript output:', output);
    // List all files in the root
    console.log('Listing files...');
    const files = yield micropython.listFiles();
    console.log('files:', files);
    // Close
    yield micropython.disconnect();
}))();
//# sourceMappingURL=basic.js.map