"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * REPL terminal. Quit by pressing Ctrl+K
 */
const readline_1 = __importDefault(require("readline"));
const main_1 = require("../src/main");
// import { MicroPythonDevice } from 'micropython-ctl';
const HOST = '10.0.1.10';
const PASSWORD = 'test';
const micropython = new main_1.MicroPythonDevice();
// Keystroke capture for interactive REPL
const setupKeyboardCapture = () => {
    readline_1.default.emitKeypressEvents(process.stdin);
    process.stdin.setRawMode(true);
    process.stdin.on('keypress', (str, key) => __awaiter(void 0, void 0, void 0, function* () {
        // console.log(str, key)
        // Quit on Ctrl+K
        if (key.name === 'k' && key.ctrl)
            process.exit(0);
        // Send anything to the device, if connected
        if (micropython.isConnected() && micropython.isTerminalMode()) {
            micropython.sendData(str);
        }
    }));
};
// Connect to device and do things
(() => __awaiter(void 0, void 0, void 0, function* () {
    setupKeyboardCapture();
    // Connect over network or serial
    // await micropython.connectNetwork(HOST, PASSWORD)
    yield micropython.connectSerial('/dev/tty.SLAB_USBtoUART');
    console.log('Exit REPL by pressing Ctrl+K');
    // Print incoming REPL data
    micropython.onTerminalData = (data) => process.stdout.write(data);
    // Shut down program on websocket close
    micropython.onclose = () => process.exit(0);
    // Send Ctrl+B (exit raw repl and show micropython header)
    micropython.sendData('\x02');
}))();
//# sourceMappingURL=terminal.js.map